P_count = get.symbol.count(mol, "P"),          # Phosphorus count
S_count = get.symbol.count(mol, "S"),          # Sulfur count
halogen_count = sum(                           # Total halogen count
get.symbol.count(mol, "F"),
get.symbol.count(mol, "Cl"),
get.symbol.count(mol, "Br"),
get.symbol.count(mol, "I")
)
)
return(features)  # Return named list
}, error = function(e) {
return(list(      # Return NAs in case of an error
molecular_weight = NA,
atom_count = NA,
H_count = NA,
C_count = NA,
N_count = NA,
O_count = NA,
P_count = NA,
S_count = NA,
halogen_count = NA
))
})
}
# Apply feature extraction to the cleaned dataset
formula_features <- map_df(cleaned_drugs$Formula, extract_features_from_formula)
# Combine extracted features with labels into one tibble
drugs_with_features <- cleaned_drugs %>%
select(label) %>%
bind_cols(formula_features)
# Inspect the resulting tibble
print(head(drugs_with_features))
print(dim(drugs_with_features))
test_formula <- "C10H14N5O7P"  # A simple example
mol <- tryCatch(get.formula(test_formula), error = function(e) { NA })
print(mol)
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
cleaned_drugs = drugs %>%
filter(!str_detect(Formula, "[^A-Za-z0-9]"))  # Keep only standard chemical formulas
# Check how many rows remain
print(nrow(cleaned_drugs))
# Preview cleaned data
print(head(cleaned_drugs))
# Identify and filter out problematic formulas
cleaned_drugs <- cleaned_drugs %>%
filter(!str_detect(Formula, "[^A-Za-z0-9]"))  # Remove any with non-standard characters
# Function to extract features using rcdk
extract_features_from_formula <- function(formula) {
tryCatch({
mol <- get.formula(formula)
features <- list(
molecular_weight = get.exact.mass(mol),
atom_count = get.total.count(mol),
H_count = get.symbol.count(mol, "H"),
C_count = get.symbol.count(mol, "C"),
N_count = get.symbol.count(mol, "N"),
O_count = get.symbol.count(mol, "O"),
P_count = get.symbol.count(mol, "P"),
S_count = get.symbol.count(mol, "S"),
halogen_count = get.symbol.count(mol, "F") +
get.symbol.count(mol, "Cl") +
get.symbol.count(mol, "Br") +
get.symbol.count(mol, "I")
)
return(features)
}, error = function(e) {
return(rep(NA, 8))  # Return NAs if parsing fails
})
}
# Apply the feature extraction function to cleaned formulas
formula_features <- map_df(cleaned_drugs$Formula, extract_features_from_formula)
library(tidyverse)
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(keras))
library(purrr)
library(rcdk)
library(progress)
#####################################################
# STEP 1 - CLEAN DATA
#####################################################
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
#####################################################
# STEP 2 - FEATURE EXTRACTION
#####################################################
cleaned_drugs <- drugs %>%
filter(!str_detect(Formula, "[^A-Za-z0-9]"))  # Keep only standard chemical formulas
# Remove formulas containing unsupported elements
unsupported_elements <- c("Tc", "Xx")  # List any unsupported elements
pattern <- paste(unsupported_elements, collapse = "|")
cleaned_drugs <- cleaned_drugs %>%
filter(!str_detect(Formula, pattern))  # Remove formulas containing unsupported elements
# Function to extract features using rcdk
extract_features_from_formula <- function(formula) {
tryCatch({
mol <- get.formula(formula)
features <- list(
molecular_weight = get.exact.mass(mol),
atom_count = get.total.count(mol),
H_count = get.symbol.count(mol, "H"),
C_count = get.symbol.count(mol, "C"),
N_count = get.symbol.count(mol, "N"),
O_count = get.symbol.count(mol, "O"),
P_count = get.symbol.count(mol, "P"),
S_count = get.symbol.count(mol, "S"),
halogen_count = get.symbol.count(mol, "F") +
get.symbol.count(mol, "Cl") +
get.symbol.count(mol, "Br") +
get.symbol.count(mol, "I")
)
return(features)
}, error = function(e) {
# Return a named list with NA values
return(list(
molecular_weight = NA,
atom_count = NA,
H_count = NA,
C_count = NA,
N_count = NA,
O_count = NA,
P_count = NA,
S_count = NA,
halogen_count = NA
))
})
}
# Apply the feature extraction function to cleaned formulas
formula_features <- map_df(cleaned_drugs$Formula, extract_features_from_formula)
# Combine extracted features with the original dataset
drugs_with_features <- cleaned_drugs %>%
select(label) %>%
bind_cols(formula_features)
# Inspect the final result
print(head(drugs_with_features))
print(dim(drugs_with_features))
library(tidyverse)
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(keras))
library(purrr)
library(rcdk)
library(progress)
#####################################################
# STEP 1 - CLEAN DATA
#####################################################
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
#####################################################
# STEP 2 - FEATURE EXTRACTION
#####################################################
cleaned_drugs <- drugs %>%
filter(!str_detect(Formula, "[^A-Za-z0-9]"))  # Keep only standard chemical formulas
# Remove formulas containing unsupported elements
unsupported_elements <- c("Tc", "Xx")  # List any unsupported elements
pattern <- paste(unsupported_elements, collapse = "|")
cleaned_drugs <- cleaned_drugs %>%
filter(!str_detect(Formula, pattern))  # Remove formulas containing unsupported elements
# Function to extract features using rcdk
extract_features_from_formula <- function(formula) {
tryCatch({
mol <- get.formula(formula)
features <- list(
molecular_weight = as.numeric(get.exact.mass(mol)),
atom_count = as.numeric(get.total.count(mol)),
H_count = as.numeric(get.symbol.count(mol, "H")),
C_count = as.numeric(get.symbol.count(mol, "C")),
N_count = as.numeric(get.symbol.count(mol, "N")),
O_count = as.numeric(get.symbol.count(mol, "O")),
P_count = as.numeric(get.symbol.count(mol, "P")),
S_count = as.numeric(get.symbol.count(mol, "S")),
halogen_count = as.numeric(get.symbol.count(mol, "F")) +
as.numeric(get.symbol.count(mol, "Cl")) +
as.numeric(get.symbol.count(mol, "Br")) +
as.numeric(get.symbol.count(mol, "I"))
)
return(features)
}, error = function(e) {
# Return a list of NAs explicitly cast to numeric
return(list(
molecular_weight = NA_real_,
atom_count = NA_real_,
H_count = NA_real_,
C_count = NA_real_,
N_count = NA_real_,
O_count = NA_real_,
P_count = NA_real_,
S_count = NA_real_,
halogen_count = NA_real_
))
})
}
# Apply the feature extraction function to cleaned formulas
formula_features <- map_df(cleaned_drugs$Formula, extract_features_from_formula)
# Combine extracted features with the original dataset
drugs_with_features <- cleaned_drugs %>%
select(label) %>%
bind_cols(formula_features)
# Inspect the final result
print(head(drugs_with_features))
print(dim(drugs_with_features))
library(tidyverse)
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(keras))
library(purrr)
library(rcdk)
library(progress)
#####################################################
# STEP 1 - CLEAN DATA
#####################################################
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
extract_features_from_formula <- function(formula) {
tryCatch({
# Parse the formula into a molecule
mol <- get.formula(formula)
# Extract features using rcdk
features <- list(
molecular_weight = get.exact.mass(mol),      # Molecular weight
atom_count = get.total.count(mol),          # Total number of atoms
H_count = get.symbol.count(mol, "H"),       # Hydrogen count
C_count = get.symbol.count(mol, "C"),       # Carbon count
N_count = get.symbol.count(mol, "N"),       # Nitrogen count
O_count = get.symbol.count(mol, "O"),       # Oxygen count
P_count = get.symbol.count(mol, "P"),       # Phosphorus count
S_count = get.symbol.count(mol, "S"),       # Sulfur count
halogen_count = get.symbol.count(mol, "F") +
get.symbol.count(mol, "Cl") +
get.symbol.count(mol, "Br") +
get.symbol.count(mol, "I")   # Halogen count
)
return(features)
}, error = function(e) {
warning(paste("Error parsing formula:", formula))
return(rep(NA, 9))  # Return NAs if parsing fails
})
}
single_formula <- drugs$Formula[1]
print(paste("Testing Formula:", single_formula))
# Run the feature extraction function
single_result <- extract_features_from_formula(single_formula)
# Convert the result into a tibble for clarity
single_result_df <- as_tibble(single_result)
# Inspect the output
print(single_result_df)
print(class(single_formula))
test_formula <- "C59H84N18O14"
mol <- tryCatch({
get.formula(test_formula)
}, error = function(e) {
print("Error encountered in get.formula.")
return(NULL)
})
print(mol)
install.packages("rcdk", dependencies = TRUE)
install.packages("rcdk", dependencies = TRUE)
install.packages("rcdk", dependencies = TRUE)
install.packages("rcdk", dependencies = TRUE)
library(tidyverse)
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(keras))
library(purrr)
library(rcdk)
library(progress)
#####################################################
# STEP 1 - CLEAN DATA
#####################################################
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
#####################################################
# STEP 2 - FEATURE EXTRACTION
#####################################################
single_formula <- "C59H84N18O14"
extract_features_from_formula <- function(formula) {
tryCatch({
# Parse formula into a molecule
mol <- get.formula(formula)
# Extract features
features <- tibble(
molecular_weight = as.numeric(get.exact.mass(mol)),
atom_count = as.numeric(get.total.count(mol)),
H_count = as.numeric(get.symbol.count(mol, "H")),
C_count = as.numeric(get.symbol.count(mol, "C")),
N_count = as.numeric(get.symbol.count(mol, "N")),
O_count = as.numeric(get.symbol.count(mol, "O")),
P_count = as.numeric(get.symbol.count(mol, "P")),
S_count = as.numeric(get.symbol.count(mol, "S")),
halogen_count = as.numeric(get.symbol.count(mol, "F") +
get.symbol.count(mol, "Cl") +
get.symbol.count(mol, "Br") +
get.symbol.count(mol, "I"))
)
return(features)
}, error = function(e) {
warning(paste("Error parsing formula:", formula))
return(tibble(
molecular_weight = NA, atom_count = NA, H_count = NA, C_count = NA,
N_count = NA, O_count = NA, P_count = NA, S_count = NA, halogen_count = NA
))
})
}
# Test the function
result <- extract_features_from_formula(single_formula)
print(result)
library(tidyverse)
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(keras))
library(purrr)
library(rcdk)
library(progress)
#####################################################
# STEP 1 - CLEAN DATA
#####################################################
## LOAD DATASET
drugs = read_csv("approved_drug_structure.csv")
print(head(drugs))
print(nrow(drugs))
## SELECT RELEVANT COLUMNS
drugs = drugs %>%
select(`Drug Groups`, Formula)
print(head(drugs))
## LABELS FOR 'APPROVED' AND 'WITHDRAWN'
drugs = drugs %>%
mutate(label = case_when(
grepl("withdrawn", `Drug Groups`) ~ 0,
grepl("^approved$", `Drug Groups`) ~ 1,
TRUE ~ NA_real_
)) %>%
drop_na(label)
print(table(drugs$label))
print(nrow(drugs))
## REMOVE MISSING ROWS
drugs = drugs %>%
filter(!is.na(Formula))
print(head(drugs))
print(nrow(drugs))
#####################################################
# STEP 2 - FEATURE EXTRACTION
#####################################################
extract_features_from_formula <- function(formula) {
tryCatch({
# Parse formula into a molecule
mol <- get.formula(formula)
print(mol)  # Check molecule details
# Extract features step-by-step and print each result
molecular_weight <- get.exact.mass(mol)
print(paste("Molecular Weight:", molecular_weight))
atom_count <- get.total.count(mol)
print(paste("Atom Count:", atom_count))
H_count <- get.symbol.count(mol, "H")
print(paste("H Count:", H_count))
# Assemble features into a tibble
features <- tibble(
molecular_weight = as.numeric(molecular_weight),
atom_count = as.numeric(atom_count),
H_count = as.numeric(H_count),
C_count = as.numeric(get.symbol.count(mol, "C")),
N_count = as.numeric(get.symbol.count(mol, "N")),
O_count = as.numeric(get.symbol.count(mol, "O")),
P_count = as.numeric(get.symbol.count(mol, "P")),
S_count = as.numeric(get.symbol.count(mol, "S")),
halogen_count = as.numeric(get.symbol.count(mol, "F") +
get.symbol.count(mol, "Cl") +
get.symbol.count(mol, "Br") +
get.symbol.count(mol, "I"))
)
return(features)
}, error = function(e) {
warning(paste("Error parsing formula:", formula))
return(tibble(
molecular_weight = NA, atom_count = NA, H_count = NA, C_count = NA,
N_count = NA, O_count = NA, P_count = NA, S_count = NA, halogen_count = NA
))
})
}
# Test again
result <- extract_features_from_formula("C59H84N18O14")
print(result)
install.packages("rcdklibs", dependencies = TRUE)
library(rJava)
.jinit()
print(.jversion)
rm(list = ls())       # Remove all objects
if (file.exists(".RData")) file.remove(".RData")  # Remove saved .RData
loaded_packages <- names(sessionInfo()$otherPkgs)
if (length(loaded_packages) > 0) {
invisible(lapply(loaded_packages, function(pkg) detach(paste0("package:", pkg), character.only = TRUE, unload = TRUE)))
}
install.packages("renv")
renv::init()  # Creates a virtual environment in the project folder
y
renv::init()  # Creates a virtual environment in the project folder
install.packages(c("tidyverse", "rcdk", "rcdklibs", "rJava", "purrr", "progress", "tidymodels", "keras"))
library(tidyverse)
library(rcdk)
library(rcdklibs)
library(rJava)
library(purrr)
library(progress)
library(tidymodels)
library(keras)
renv::snapshot()  # Saves the state of the environment
library(rJava)
.jinit()  # Initialize Java
print(.jversion)  # Confirm Java version
library(rJava)
.jinit()  # Initialize Java
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
